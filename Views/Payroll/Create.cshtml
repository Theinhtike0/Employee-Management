@model HR_Products.ViewModels.PayrollCreateViewModel

@{
    ViewData["Title"] = "Create Payroll (Monthly)";
}

<h4>Create Payroll Record</h4>
<hr />

<form asp-action="Create" method="post">
    @Html.AntiForgeryToken()
    <div asp-validation-summary="All" class="text-danger"></div>

    <div class="row">
        @if (Model.IsAdmin)
        {
            <div class="col-md-6">
                <div class="form-group">
                    <label asp-for="EmpeId" class="control-label">Employee</label>
                    <select asp-for="EmpeId" class="form-control" asp-items="Model.Employees" id="EmpeIdSelect">
                        <option value="">Select Employee</option>
                    </select>
                    <span asp-validation-for="EmpeId" class="text-danger"></span>
                </div>
            </div>
        }
        else
        {
            <div class="col-md-6">
                <div class="form-group">
                    <label class="control-label">Employee</label>
                    <input class="form-control" value="@Model.EmpeName" readonly />
                    <input type="hidden" asp-for="EmpeId" id="EmpeIdHidden" />
                </div>
            </div>
        }

    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <label asp-for="Department" class="control-label"></label>
                <input asp-for="Department" class="form-control" id="DepartmentInput" readonly value="@Model.Department" />
                <span asp-validation-for="Department" class="text-danger"></span>
            </div>
        </div>

        <div class="col-md-6">
            <div class="form-group">
                <label asp-for="Position" class="control-label"></label>
                <input asp-for="Position" class="form-control" id="PositionInput" readonly value="@Model.Position" />
                <span asp-validation-for="Position" class="text-danger"></span>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <label asp-for="BasicSalary" class="control-label"></label>
                <input asp-for="BasicSalary" class="form-control" id="BasicSalaryInput" type="number" step="0.01" value="@Model.BasicSalary.ToString("0.00")" />
                <span asp-validation-for="BasicSalary" class="text-danger"></span>
            </div>
        </div>

        <div class="col-md-6">
            <div class="form-group">
                <label asp-for="Allowance" class="control-label"></label>
                <input asp-for="Allowance" class="form-control" id="AllowanceInput" type="number" step="0.01" value="@Model.Allowance.ToString("0.00")" />
                <span asp-validation-for="Allowance" class="text-danger"></span>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <label asp-for="OvertimeHours" class="control-label"></label>
                <input asp-for="OvertimeHours" class="form-control" id="OvertimeHoursInput" type="number" step="0.01" value="@Model.OvertimeHours.ToString("0.00")" />
                <span asp-validation-for="OvertimeHours" class="text-danger"></span>
            </div>
        </div>

        <div class="col-md-6">
            <div class="form-group">
                <label asp-for="Tax" class="control-label"></label>
                <input asp-for="Tax" class="form-control" id="TaxInput" type="number" step="0.01" value="@Model.Tax.ToString("0.00")" />
                <span asp-validation-for="Tax" class="text-danger"></span>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <label asp-for="Deductions" class="control-label"></label>
                <input asp-for="Deductions" class="form-control" id="DeductionsInput" type="number" step="0.01" value="@Model.Deductions.ToString("0.00")" />
                <span asp-validation-for="Deductions" class="text-danger"></span>
            </div>
        </div>

        <div class="col-md-6">
            <div class="form-group">
                <label asp-for="GrossPay" class="control-label"></label>
                <input asp-for="GrossPay" class="form-control" id="GrossPayInput" type="number" step="0.01" readonly value="@Model.GrossPay.ToString("0.00")" />
                <span asp-validation-for="GrossPay" class="text-danger"></span>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <label asp-for="NetPay" class="control-label"></label>
                <input asp-for="NetPay" class="form-control" id="NetPayInput" readonly value="@Model.NetPay.ToString("0.00")" />
                <span asp-validation-for="NetPay" class="text-danger"></span>
            </div>
        </div>

        <div class="col-md-6">
            <div class="form-group">
                <label asp-for="PayDate" class="control-label"></label>
                <input asp-for="PayDate" class="form-control" type="date" />
                <span asp-validation-for="PayDate" class="text-danger"></span>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <label asp-for="FrDate" class="control-label"></label>
                <input asp-for="FrDate" class="form-control" type="date" id="FrDateInput" />
                <span asp-validation-for="FrDate" class="text-danger"></span>
            </div>
        </div>

        <div class="col-md-6">
            <div class="form-group">
                <label asp-for="ToDate" class="control-label"></label>
                <input asp-for="ToDate" class="form-control" type="date" id="ToDateInput" />
                <span asp-validation-for="ToDate" class="text-danger"></span>
            </div>
        </div>
    </div>

    <div class="form-group mt-3">
        <button type="submit" class="btn btn-primary">Submit</button>
        <a class="btn btn-outline-warning btn-md" style="width: 100px;" href="javascript:history.back()" role="button">Back</a>
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const empeIdSelect = document.getElementById("EmpeIdSelect"); 
            const empeIdHidden = document.getElementById("EmpeIdHidden");
            const departmentInput = document.getElementById("DepartmentInput");
            const positionInput = document.getElementById("PositionInput");

            const basicSalaryInput = document.getElementById("BasicSalaryInput");
            const allowanceInput = document.getElementById("AllowanceInput");
            const taxInput = document.getElementById("TaxInput");
            const deductionsInput = document.getElementById("DeductionsInput");
            const netPayInput = document.getElementById("NetPayInput");
            const overtimeHoursInput = document.getElementById("OvertimeHoursInput");
            const grossPayInput = document.getElementById("GrossPayInput");

            const frDateInput = document.getElementById("FrDateInput");
            const toDateInput = document.getElementById("ToDateInput");

            console.log("DOM Content Loaded."); 
            async function populateEmployeeDetails(employeeId) {
                console.log("populateEmployeeDetails called with ID:", employeeId);

                if (!employeeId || parseInt(employeeId) <= 0) {
                    console.warn("Invalid Employee ID provided to populateEmployeeDetails. Clearing fields.");
                    departmentInput.value = '';
                    positionInput.value = '';
                    basicSalaryInput.value = (0).toFixed(2);
                    calculateGrossPay();
                    calculateNetPayWithDeductions();
                    return;
                }

                console.log(`Attempting to fetch details for employee ID: ${employeeId}`);

                try {
                    const response = await fetch(`/Payroll/GetEmployeeDetails?employeeId=${employeeId}`);
                    console.log("Response status:", response.status);

                    if (!response.ok) {
                        const errorData = await response.json();
                        console.error("Server error response data:", errorData);
                        throw new Error(`Server responded with status ${response.status}: ${errorData.error || 'Unknown error fetching employee details'}`);
                    }
                    const data = await response.json();
                    console.log("Received employee details data:", data);

                    departmentInput.value = data.department || '';
                    positionInput.value = data.position || '';
                    basicSalaryInput.value = parseFloat(data.basicSalary || 0).toFixed(2); 
                    console.log("Fields updated: Dept=", departmentInput.value, ", Pos=", positionInput.value, ", BasicSalary=", basicSalaryInput.value);

                    calculateGrossPay();
                    calculateNetPayWithDeductions();
                } catch (error) {
                    console.error("Error during populateEmployeeDetails AJAX call:", error);
                    alert("Error fetching employee details. See console for more info.");
                    
                    departmentInput.value = '';
                    positionInput.value = '';
                    basicSalaryInput.value = (0).toFixed(2);
                    calculateGrossPay();
                    calculateNetPayWithDeductions();
                }
            }

            function calculateGrossPay() {
                const basicSalary = parseFloat(basicSalaryInput.value) || 0;
                const allowance = parseFloat(allowanceInput.value) || 0;
                const overtimeHours = parseFloat(overtimeHoursInput.value) || 0;
                const calculatedGrossPay = basicSalary + allowance + overtimeHours;
                grossPayInput.value = calculatedGrossPay.toFixed(2);
                console.log("calculateGrossPay: Gross Pay =", calculatedGrossPay);
            }

            async function calculateNetPayWithDeductions() {
                const employeeId = empeIdSelect ? empeIdSelect.value : empeIdHidden.value;
                const basicSalary = parseFloat(basicSalaryInput.value) || 0;
                const allowance = parseFloat(allowanceInput.value) || 0;
                const tax = parseFloat(taxInput.value) || 0;
                const deductions = parseFloat(deductionsInput.value) || 0;
                const overtimeHours = parseFloat(overtimeHoursInput.value) || 0;
                const frDate = frDateInput.value;
                const toDate = toDateInput.value;

                
                if (!employeeId || parseInt(employeeId) <= 0 || !frDate || !toDate) {
                    console.warn("calculateNetPayWithDeductions: Missing essential data for AJAX. Performing fallback client-side calculation.");
                    netPayInput.value = (basicSalary + allowance + overtimeHours - tax - deductions).toFixed(2);
                    return;
                }

                console.log("Initiating NetPay AJAX calculation with parameters:", { employeeId, basicSalary, allowance, tax, overtimeHours, deductions, frDate, toDate });

                try {
                    const params = new URLSearchParams({
                        employeeId: employeeId,
                        basicSalary: basicSalary,
                        allowance: allowance,
                        tax: tax,
                        overtimeHours: overtimeHours,
                        deductions: deductions,
                        frDate: frDate,
                        toDate: toDate
                    });
                    const response = await fetch(`/Payroll/GetCalculatedNetPay?${params.toString()}`);
                    console.log("NetPay AJAX Response status:", response.status);

                    if (!response.ok) {
                        const errorData = await response.json();
                        console.error("NetPay AJAX Server error response data:", errorData);
                        throw new Error(`Server responded with status ${response.status}: ${errorData.error || 'Unknown net pay calculation error'}`);
                    }
                    const data = await response.json();
                    netPayInput.value = parseFloat(data.netPay).toFixed(2);
                    console.log("NetPay calculated successfully via AJAX:", data.netPay);
                } catch (error) {
                    console.error("Error calculating NetPay with leave deductions (AJAX call failed):", error);
                    alert("Error calculating Net Pay. See console for more info."); 
                    netPayInput.value = (basicSalary + allowance + overtimeHours - tax - deductions).toFixed(2);
                }
            }

          
            if (empeIdSelect) {
                empeIdSelect.addEventListener('change', function() {
                    console.log("Employee select changed to:", this.value);
                    populateEmployeeDetails(this.value);
                });
            } else {
                console.log("empeIdSelect not present. Assuming non-admin. EmpeIdHidden value:", empeIdHidden ? empeIdHidden.value : 'N/A');
            }

            basicSalaryInput.addEventListener('input', function() {
                console.log("BasicSalary changed:", this.value);
                calculateGrossPay();
                calculateNetPayWithDeductions();
            });
            allowanceInput.addEventListener('input', function() {
                console.log("Allowance changed:", this.value);
                calculateGrossPay();
                calculateNetPayWithDeductions();
            });
            overtimeHoursInput.addEventListener('input', function() {
                console.log("OvertimeHours changed:", this.value);
                calculateGrossPay();
                calculateNetPayWithDeductions();
            });
            taxInput.addEventListener('input', function() {
                console.log("Tax changed:", this.value);
                calculateNetPayWithDeductions();
            });
            deductionsInput.addEventListener('input', function() {
                console.log("Deductions changed:", this.value);
                calculateNetPayWithDeductions();
            });

            frDateInput.addEventListener('change', function() {
                console.log("FrDate changed:", this.value);
                calculateNetPayWithDeductions();
            });
            toDateInput.addEventListener('change', function() {
                console.log("ToDate changed:", this.value);
                calculateNetPayWithDeductions();
            });


            const initialEmpeId = empeIdSelect ? empeIdSelect.value : (empeIdHidden ? empeIdHidden.value : '');
            console.log("Initial EmpeId on page load determined as:", initialEmpeId, " (Model.IsAdmin is: @(Model.IsAdmin.ToString().ToLower()))");

            if (initialEmpeId && parseInt(initialEmpeId) > 0) {
                console.log("Calling populateEmployeeDetails for initial load with ID:", initialEmpeId);
                populateEmployeeDetails(initialEmpeId);
            } else {
                console.log("No valid initial EmpeId for populateEmployeeDetails. Running initial calculations directly.");
                calculateGrossPay();
                calculateNetPayWithDeductions();
            }
        });
    </script>
}
