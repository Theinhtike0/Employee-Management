@model List<HR_Products.ViewModels.PayrollDetailViewModel>

<h2 class="text-center mb-5">List of Employees</h2>

<link rel="stylesheet" href="~/css/site.css" />

<div class="row mb-5">
    <div class="col-auto">
        <a class="btn btn-primary" asp-controller="Payroll" asp-action="Create">Create Payroll</a>
    </div>

    <div class="col-auto">
        <a class="btn btn-outline-secondary" href="~/Format/PayrollData.xlsx" download>
            <i class="bi bi-download"></i> Download Template
        </a>

    </div>

    <div class="col-auto">
        <form asp-action="ImportPayrolls" method="post" enctype="multipart/form-data" class="row g-2">
            @Html.AntiForgeryToken()
            <div class="col-auto">
                <div class="input-group">
                    <input type="file" name="excelFile" accept=".xlsx" class="form-control" required />
                    <button type="submit" class="btn btn-success">
                        <i class="bi bi-upload"></i> Import
                    </button>
                </div>
                <small class="form-text text-muted">Upload payroll .xlsx</small>
            </div>
        </form>

    </div>

    <div class="col">
        <input type="text" id="searchInput" class="form-control" placeholder="Search Employees" />
    </div>
</div>

<table class="table table-bordered">
    <thead>
        <tr>
            <th>Employee Name</th>
            <th>Department</th>
            <th>Position</th>
            <th>BasicSalary</th>
            <th>Allowance</th>
            <th>Income Tax</th>
            <th>ML Amt.</th>
            <th>UPL Amt.</th>
            <th>SER-L Amt.</th>
            <th>Net Amount</th>
            <th>Paid Day</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody id="employeeTableBody">
        @foreach (var item in Model)
        {
            <tr>
                <td>@item.EmpeName</td>
                <td>@item.Department</td>
                <td>@item.Position</td>
                <td>@item.BasicSalary.ToString("N2")</td>
                <td>@item.Allowance.ToString("N2")</td>
                <td>@item.Tax.ToString("N2")</td>
                <td>@item.MedicalLeaveDeduction.ToString("N2")</td>
                <td>@item.UnpaidLeaveDeduction.ToString("N2")</td>
                <td>@item.ServiceLeaveDeduction.ToString("N2")</td>
                <td>@item.NetPay.ToString("N2")</td>
                <td>@item.PayDate.ToString("MM/dd/yyyy")</td>
                <td style="white-space: nowrap">
                    <a class="btn btn-warning btn-sm" asp-controller="Payroll" asp-action="Edit" asp-route-id="@item.PayrollId">Edit</a>
                    <a class="btn btn-danger btn-sm" asp-action="Delete" asp-route-id="@item.PayrollId" onclick="return confirm('Are you sure you want to delete this?');">Delete</a>
                    <a class="btn btn-success btn-sm" asp-controller="Payroll" asp-action="Detail" asp-route-id="@item.PayrollId">Detail</a>
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="mt-4 d-flex justify-content-between align-items-center">
    <nav>
        <ul class="pagination pagination-sm mb-0" id="paginationUl">
            <li class="page-item" id="prevBtn">
                <a class="page-link" href="#">Previous</a>
            </li>
            <li class="page-item" id="nextBtn">
                <a class="page-link" href="#">Next</a>
            </li>
        </ul>
    </nav>

    <div class="d-flex gap-2">
        <a class="btn btn-secondary" href="javascript:history.back()" role="button">Back</a>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const searchInput = document.getElementById("searchInput");
        const employeeTableBody = document.getElementById("employeeTableBody");
        let tableRows = Array.from(employeeTableBody.getElementsByTagName("tr"));

        const prevBtn = document.getElementById("prevBtn");
        const nextBtn = document.getElementById("nextBtn");
        const paginationUl = document.getElementById("paginationUl");

        let currentPage = 1;
        const rowsPerPage = 5;
        let filteredRows = [...tableRows];

        function displayRowsForPage(page) {
            const start = (page - 1) * rowsPerPage;
            const end = start + rowsPerPage;

            tableRows.forEach(row => row.style.display = "none");
            filteredRows.slice(start, end).forEach(row => row.style.display = "");

            updatePaginationButtons();
            generatePageNumbers();
        }

        function updatePaginationButtons() {
            const totalPages = Math.ceil(filteredRows.length / rowsPerPage);
            prevBtn.classList.toggle("disabled", currentPage === 1);
            nextBtn.classList.toggle("disabled", currentPage === totalPages || totalPages === 0);
        }

        function generatePageNumbers() {
            const totalPages = Math.ceil(filteredRows.length / rowsPerPage);
            const maxPageNumbersToShow = 5;

            for (let i = paginationUl.children.length - 2; i > 0; i--) {
                paginationUl.children[i].remove();
            }

            for (let i = 1; i <= Math.min(totalPages, maxPageNumbersToShow); i++) {
                addPageNumber(i);
            }
        }

        function addPageNumber(pageNum) {
            const li = document.createElement("li");
            li.className = "page-item";

            const a = document.createElement("a");
            a.className = "page-link";
            a.href = "#";
            a.textContent = pageNum;

            if (pageNum === currentPage) {
                li.classList.add("active");
            }

            a.onclick = function (e) {
                e.preventDefault();
                currentPage = pageNum;
                displayRowsForPage(currentPage);
            };

            li.appendChild(a);
            paginationUl.insertBefore(li, nextBtn);
        }

        function filterEmployees() {
            const searchTerm = searchInput.value.toLowerCase();

            filteredRows = tableRows.filter(row => {
                const empeNameCell = row.getElementsByTagName("td")[0];
                const departmentCell = row.getElementsByTagName("td")[1];
                const positionCell = row.getElementsByTagName("td")[2];

                let matches = false;
                if (empeNameCell && empeNameCell.textContent.toLowerCase().includes(searchTerm)) matches = true;
                if (departmentCell && departmentCell.textContent.toLowerCase().includes(searchTerm)) matches = true;
                if (positionCell && positionCell.textContent.toLowerCase().includes(searchTerm)) matches = true;

                return matches;
            });

            currentPage = 1;
            displayRowsForPage(currentPage);
        }

        prevBtn.addEventListener("click", function (e) {
            e.preventDefault();
            if (currentPage > 1) {
                currentPage--;
                displayRowsForPage(currentPage);
            }
        });

        nextBtn.addEventListener("click", function (e) {
            e.preventDefault();
            const totalPages = Math.ceil(filteredRows.length / rowsPerPage);
            if (currentPage < totalPages) {
                currentPage++;
                displayRowsForPage(currentPage);
            }
        });

        displayRowsForPage(currentPage);
        searchInput.addEventListener("keyup", filterEmployees);
    });
</script>
