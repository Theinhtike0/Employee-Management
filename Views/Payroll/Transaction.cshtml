@model List<HR_Products.Models.Entitites.Payroll> 

@{
    ViewData["Title"] = "Payroll Transactions List (Monthly)";
}

<h2 class="text-center mb-5">Payroll Transaction History</h2>
<link rel="stylesheet" href="~/css/site.css" />

<div class="row mb-5">
    <div class="col text-end">
        <input type="text" id="searchInput" class="form-control" placeholder="Search Transactions..." />
    </div>
</div>

<table class="table table-bordered">
    <thead>
        <tr>
            <th>Employee Name</th>
            <th>Department</th>
            <th>Position</th>
            <th>Basic Salary</th>
            <th>Allowance</th>
            <th>Tax</th>
            <th>Net Amount</th>
            <th>From Date</th>
            <th>To Date</th>
            <th>Pay Date</th>
        </tr>
    </thead>
    <tbody id="transactionTableBody"> 
        @if (Model != null && Model.Any())
        {
            @foreach (var item in Model)
            {
                <tr>
                    <td>@item.EmpeName</td>
                    <td>@item.Department</td>
                    <td>@item.Position</td>
                    <td>@item.BasicSalary.ToString("0.00")</td>
                    <td>@item.Allowance.ToString("0.00")</td>
                    <td>@item.Tax.ToString("0.00")</td>
                    <td>@item.NetPay.ToString("0.00")</td>
                    <td>@item.FrDate.ToString("MM/dd/yyyy")</td>
                    <td>@item.ToDate.ToString("MM/dd/yyyy")</td>
                    <td>@item.PayDate.ToString("MM/dd/yyyy")</td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="13" class="text-center">No transaction records found matching your criteria.</td> {{-- Adjust colspan based on number of columns --}}
            </tr>
        }
    </tbody>
</table>
<div class="mt-4 d-flex justify-content-end">
    <nav>
        <ul class="pagination pagination-sm mb-0" id="paginationUl">
            <li class="page-item" id="prevBtn">
                <a class="page-link" href="#">Previous</a>
            </li>
            <li class="page-item" id="nextBtn">
                <a class="page-link" href="#">Next</a>
            </li>
        </ul>
    </nav>
</div>

<div class="mt-5 d-flex justify-content-start">
    <a class="btn btn-outline-warning btn-md" style="width: 100px;" href="javascript:history.back()" role="button">Back</a>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const searchInput = document.getElementById("searchInput");
            const transactionTableBody = document.getElementById("transactionTableBody");
            let tableRows = Array.from(transactionTableBody.getElementsByTagName("tr"));

            const prevBtn = document.getElementById("prevBtn");
            const nextBtn = document.getElementById("nextBtn");
            const paginationUl = document.getElementById("paginationUl");

            let currentPage = 1;
            const rowsPerPage = 7; // Adjust as needed
            let filteredRows = [...tableRows];

            function displayRowsForPage(page) {
                const start = (page - 1) * rowsPerPage;
                const end = start + rowsPerPage;

                tableRows.forEach(row => row.style.display = "none");
                filteredRows.slice(start, end).forEach(row => row.style.display = "");

                updatePaginationButtons();
                generatePageNumbers();
            }

            function updatePaginationButtons() {
                const totalPages = Math.ceil(filteredRows.length / rowsPerPage);
                prevBtn.classList.toggle("disabled", currentPage === 1);
                nextBtn.classList.toggle("disabled", currentPage === totalPages || totalPages === 0);
            }

            function generatePageNumbers() {
                const totalPages = Math.ceil(filteredRows.length / rowsPerPage);
                const maxPageNumbersToShow = 5;

                for (let i = paginationUl.children.length - 2; i > 0; i--) {
                    paginationUl.children[i].remove();
                }

                for (let i = 1; i <= Math.min(totalPages, maxPageNumbersToShow); i++) {
                    addPageNumber(i);
                }
            }

            function addPageNumber(pageNum) {
                const li = document.createElement("li");
                li.className = "page-item";

                const a = document.createElement("a");
                a.className = "page-link";
                a.href = "#";
                a.textContent = pageNum;

                if (pageNum === currentPage) {
                    li.classList.add("active");
                }

                a.onclick = function (e) {
                    e.preventDefault();
                    currentPage = pageNum;
                    displayRowsForPage(currentPage);
                };

                li.appendChild(a);
                paginationUl.insertBefore(li, nextBtn);
            }

            // Search functionality
            function filterTransactions() {
                const searchTerm = searchInput.value.toLowerCase();

                filteredRows = tableRows.filter(row => {
                    // Column indices need to match your HTML table
                    const payrollIdCell = row.getElementsByTagName("td")[0];
                    const employeeNameCell = row.getElementsByTagName("td")[1];
                    const departmentCell = row.getElementsByTagName("td")[2];
                    const positionCell = row.getElementsByTagName("td")[3];
                    const payDateCell = row.getElementsByTagName("td")[12]; // Assuming Pay Date is the 13th column (index 12)

                    let matches = false;
                    if (payrollIdCell && payrollIdCell.textContent.toLowerCase().includes(searchTerm)) matches = true;
                    if (employeeNameCell && employeeNameCell.textContent.toLowerCase().includes(searchTerm)) matches = true;
                    if (departmentCell && departmentCell.textContent.toLowerCase().includes(searchTerm)) matches = true;
                    if (positionCell && positionCell.textContent.toLowerCase().includes(searchTerm)) matches = true;
                    if (payDateCell && payDateCell.textContent.toLowerCase().includes(searchTerm)) matches = true;

                    return matches;
                });

                currentPage = 1;
                displayRowsForPage(currentPage);
            }

            // Event handlers for pagination
            prevBtn.addEventListener("click", function (e) {
                e.preventDefault();
                if (currentPage > 1) {
                    currentPage--;
                    displayRowsForPage(currentPage);
                }
            });

            nextBtn.addEventListener("click", function (e) {
                e.preventDefault();
                const totalPages = Math.ceil(filteredRows.length / rowsPerPage);
                if (currentPage < totalPages) {
                    currentPage++;
                    displayRowsForPage(currentPage);
                }
            });

            // Initial display on page load
            if (tableRows.length > 0) {
                displayRowsForPage(currentPage);
            } else {
                paginationUl.parentElement.style.display = 'none';
            }
            searchInput.addEventListener("keyup", filterTransactions);
        });
    </script>
}