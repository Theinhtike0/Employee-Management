@using HR_Products.ViewModels
@model LeaveHistoryViewModel

<h2>Leave History</h2>
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">@TempData["SuccessMessage"]</div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
}

@{
    bool isRegularUser = ViewBag.IsRegularUser ?? false;
    string displayedEmpeName = "Employee Not Found";
    if (isRegularUser && Model.LeaveRequests != null && Model.LeaveRequests.Any())
    {
        displayedEmpeName = Model.LeaveRequests.First().EmpeName;
    }
}

<form method="get" asp-action="History">
    <div class="row mb-3">
        <div class="col-md-4">
            @if (isRegularUser)
            {
                <label class="form-label">Employee Name</label>
                <input type="text" class="form-control" value="@displayedEmpeName" readonly />
                <input type="hidden" asp-for="SelectedEmployeeId" />
            }
            else
            {
                <label for="SelectedEmployeeId" class="form-label">Employee Name</label>
                <select asp-for="SelectedEmployeeId" asp-items="Model.Employees" class="form-select">
                    <option value="">All Employees</option>
                </select>
            }
        </div>
        <div class="col-md-4">
            <label for="SelectedLeaveTypeId" class="form-label">Leave Type</label>
            <select asp-for="SelectedLeaveTypeId" asp-items="Model.LeaveTypes" class="form-select">
                <option value="">All Leave Types</option>
            </select>
        </div>
        <div class="col-md-4 d-flex align-items-end">
            <button type="submit" class="btn btn-primary">Search</button>
        </div>
    </div>
</form>

@if (Model.LeaveRequests.Any())
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Employee</th>
                <th>Leave Type</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Request Date</th>
                <th>Amount</th>
                <th>Attach File</th>
                <th>Status</th>
                <th>Remove</th>
            </tr>
        </thead>
        <tbody id="leaveRequestsTableBody">
            @foreach (var request in Model.LeaveRequests)
            {
                <tr>
                    <td>@request.EmpeName</td>
                    <td>@request.LeaveTypeName</td>
                    <td>@request.StartDate.ToString("MM/dd/yyyy")</td>
                    <td>@request.EndDate.ToString("MM/dd/yyyy")</td>
                    <td>@request.RequestedAt.ToString("MM/dd/yyyy")</td>
                    <td>@request.Duration.ToString("0.00")</td>
                    <td>
                        @if (!string.IsNullOrEmpty(request.AttachmentPath))
                        {
                            var isImageAttachment = request.AttachmentContentType != null &&
                            (request.AttachmentContentType.StartsWith("image/jpeg") ||
                            request.AttachmentContentType.StartsWith("image/png") ||
                            request.AttachmentContentType.StartsWith("image/gif") ||
                            request.AttachmentContentType.StartsWith("image/bmp"));

                            if (isImageAttachment)
                            {
                                <div style="display: flex; align-items: center;">
                                    <a href="@Url.Content(request.AttachmentPath)" target="_blank" title="View @request.AttachmentFileName">
                                        <img src="@Url.Content(request.AttachmentPath)"
                                             alt="Leave Attachment: @request.AttachmentFileName"
                                             style="width: 50px; height: 50px; object-fit: cover; border: 1px solid #ddd;" />
                                    </a>

                                    <a href="@Url.Action("DownloadAttachment", new { id = request.Id })" title="Download @request.AttachmentFileName">
                                        <i class="fas fa-arrow-down" style="margin-left: 5px; color: #007bff;"></i>
                                    </a>
                                </div>
                            }
                            else
                            {
                                <a href="@Url.Content(request.AttachmentPath)" target="_blank" title="Download @request.AttachmentFileName">
                                    <i class="fas fa-file-alt"></i> Download
                                </a>
                            }
                        }
                        else
                        {
                            <span>No Attach</span>
                        }
                    </td>
                    <td>
                        <span class="badge @(request.Status == "Approved" ? "bg-success" :
                                            request.Status == "Rejected" ? "bg-danger" : "bg-warning")">
                            @request.Status
                        </span>
                    </td>
                    <td>
                        @if (request.Status == "Pending")
                        {
                            <a asp-action="Withdraw"
                               asp-route-id="@request.Id"
                               class="btn badge bg-danger"
                               onclick="return confirm('Are you sure you want to withdraw this request?');">
                                Withdraw
                            </a>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="mt-4 d-flex justify-content-end">
        <nav>
            <ul class="pagination pagination-sm mb-0" id="paginationUl">
                <li class="page-item" id="prevBtn">
                    <a class="page-link" href="#">Previous</a>
                </li>
                <li class="page-item" id="nextBtn">
                    <a class="page-link" href="#">Next</a>
                </li>
            </ul>
        </nav>
    </div>

}
else
{
    <div class="alert alert-info">No leave requests found matching your criteria.</div>
}

<div class="mt-5 d-flex justify-content-start">
    <a class="btn btn-outline-warning btn-md" style="width: 100px;" href="javascript:history.back()" role="button">Back</a>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const leaveRequestsTableBody = document.getElementById("leaveRequestsTableBody");
        const tableRows = Array.from(leaveRequestsTableBody.getElementsByTagName("tr"));

        const prevBtn = document.getElementById("prevBtn");
        const nextBtn = document.getElementById("nextBtn");
        const paginationUl = document.getElementById("paginationUl"); 

        let currentPage = 1;
        const rowsPerPage = 5;
        function displayRowsForPage(page) {
            const start = (page - 1) * rowsPerPage;
            const end = start + rowsPerPage;
            tableRows.forEach(row => row.style.display = "none");
            tableRows.slice(start, end).forEach(row => row.style.display = "");

            updatePaginationButtons();
            generatePageNumbers();
        }

        function updatePaginationButtons() {
            const totalPages = Math.ceil(tableRows.length / rowsPerPage);
            prevBtn.classList.toggle("disabled", currentPage === 1);
            nextBtn.classList.toggle("disabled", currentPage === totalPages || totalPages === 0);
        }

        function generatePageNumbers() {
            const totalPages = Math.ceil(tableRows.length / rowsPerPage);
            const maxPageNumbersToShow = 5; 
            for (let i = paginationUl.children.length - 2; i > 0; i--) {
                paginationUl.children[i].remove();
            }

            for (let i = 1; i <= Math.min(totalPages, maxPageNumbersToShow); i++) {
                addPageNumber(i);
            }
        }

        function addPageNumber(pageNum) {
            const li = document.createElement("li");
            li.className = "page-item";

            const a = document.createElement("a");
            a.className = "page-link";
            a.href = "#"; 
            a.textContent = pageNum;

            if (pageNum === currentPage) {
                li.classList.add("active"); 
            }

            a.onclick = function (e) {
                e.preventDefault(); 
                currentPage = pageNum;
                displayRowsForPage(currentPage);
            };

            li.appendChild(a);
            paginationUl.insertBefore(li, nextBtn);
        }

        prevBtn.addEventListener("click", function (e) {
            e.preventDefault();
            if (currentPage > 1) {
                currentPage--;
                displayRowsForPage(currentPage);
            }
        });

        nextBtn.addEventListener("click", function (e) {
            e.preventDefault();
            const totalPages = Math.ceil(tableRows.length / rowsPerPage);
            if (currentPage < totalPages) {
                currentPage++;
                displayRowsForPage(currentPage);
            }
        });

        if (tableRows.length > 0) {
            displayRowsForPage(currentPage);
        } else {
            paginationUl.parentElement.style.display = 'none';
        }
    });
</script>