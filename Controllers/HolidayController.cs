using HR_Products.Data;
using HR_Products.Models.Entitites;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Microsoft.AspNetCore.Http;
using OfficeOpenXml;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using System.Globalization; // Still useful for general culture-invariant operations if needed

namespace HR_Products.Controllers
{
    public class HolidayController : Controller
    {
        private readonly AppDbContext _context;
        private readonly ILogger<HolidayController> _logger;

        public HolidayController(AppDbContext context, ILogger<HolidayController> logger)
        {
            _context = context;
            _logger = logger;
        }

        public IActionResult Index()
        {
            var holidays = _context.HOLIDAYS.OrderBy(h => h.HolidayDate).ToList();
            return View(holidays);
        }

        public IActionResult Create() => View();

        [HttpPost]
        public IActionResult Create(Holiday model)
        {
            if (ModelState.IsValid)
            {
                _context.HOLIDAYS.Add(model);
                _context.SaveChanges();
                TempData["SuccessMessage"] = "Holiday added successfully!";
                return RedirectToAction("Index");
            }
            TempData["ErrorMessage"] = "Failed to add holiday. Please check the form.";
            return View(model);
        }

        public IActionResult Delete(int id)
        {
            var holiday = _context.HOLIDAYS.Find(id);
            if (holiday == null)
            {
                TempData["ErrorMessage"] = "Holiday not found.";
                return NotFound();
            }

            _context.HOLIDAYS.Remove(holiday);
            _context.SaveChanges();
            TempData["SuccessMessage"] = "Holiday deleted successfully!";
            return RedirectToAction("Index");
        }


        // --- NEW ACTIONS FOR EXCEL IMPORT ---

        [HttpGet]
        public IActionResult DownloadHolidayTemplate()
        {
            // Set the license context for EPPlus
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial; // Or LicenseContext.Commercial

            var stream = new MemoryStream();
            using (var package = new ExcelPackage(stream))
            {
                var worksheet = package.Workbook.Worksheets.Add("Holidays");

                // FIXED: Removed "HolidayId" from headers as it should be auto-generated by DB
                string[] headers = new string[]
                {
                    "HolidayName",
                    "HolidayDate (YYYY-MM-DD)", // Clarify format for user guidance
                    "Description",
                    "CreatedAt (YYYY-MM-DD)" // Clarify format for user guidance
                };

                // Write headers to the first row
                for (int i = 0; i < headers.Length; i++)
                {
                    worksheet.Cells[1, i + 1].Value = headers[i];
                    worksheet.Cells[1, i + 1].Style.Font.Bold = true;
                }

                // Optional: Add some example data to the template
                worksheet.Cells[2, 1].Value = "Myanmar New Year";
                worksheet.Cells[2, 2].Value = "2025-04-13"; // Example date in correct format
                worksheet.Cells[2, 3].Value = "Thingyan Festival";
                worksheet.Cells[2, 4].Value = "2025-07-02"; // Example date in correct format

                worksheet.Cells[3, 1].Value = "Myanmar New Year (Day 2)";
                worksheet.Cells[3, 2].Value = "2025-04-14"; // Example date in correct format
                worksheet.Cells[3, 3].Value = "Thingyan Festival";
                worksheet.Cells[3, 4].Value = "2025-07-02"; // Example date in correct format


                worksheet.Cells[worksheet.Dimension.Address].AutoFitColumns();

                package.Save();
            }
            stream.Position = 0; // Reset stream position to the beginning

            string excelName = $"HolidayImportTemplate-{DateTime.Now.ToString("yyyyMMddHHmmss")}.xlsx";
            _logger.LogInformation("Generated Holiday import template: {FileName}", excelName);
            return File(stream, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", excelName);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> ImportHolidays(IFormFile excelFile)
        {
            if (excelFile == null || excelFile.Length == 0)
            {
                TempData["ErrorMessage"] = "Please select a file to upload.";
                return RedirectToAction(nameof(Index));
            }

            if (Path.GetExtension(excelFile.FileName).ToLower() != ".xlsx")
            {
                TempData["ErrorMessage"] = "Only .xlsx Excel files are allowed.";
                return RedirectToAction(nameof(Index));
            }

            var importedHolidays = new List<Holiday>();

            try
            {
                using var stream = new MemoryStream();
                await excelFile.CopyToAsync(stream);

                using var package = new ExcelPackage(stream);
                var worksheet = package.Workbook.Worksheets.FirstOrDefault();

                if (worksheet?.Dimension == null)
                {
                    TempData["ErrorMessage"] = "The Excel file is empty or invalid.";
                    return RedirectToAction(nameof(Index));
                }

                int headerRow = 1; // Assuming first row is headers

                // Map columns
                var columnMap = new Dictionary<string, int>(StringComparer.OrdinalIgnoreCase);
                for (int col = 1; col <= worksheet.Dimension.End.Column; col++)
                {
                    var header = worksheet.Cells[headerRow, col].Text?.Trim();
                    if (string.IsNullOrEmpty(header)) continue;

                    if (header.Equals("HolidayName", StringComparison.OrdinalIgnoreCase))
                        columnMap["HolidayName"] = col;
                    else if (header.Equals("HolidayDate", StringComparison.OrdinalIgnoreCase) || header.Equals("Date", StringComparison.OrdinalIgnoreCase))
                        columnMap["HolidayDate"] = col;
                    else if (header.Equals("Description", StringComparison.OrdinalIgnoreCase))
                        columnMap["Description"] = col;
                }

                if (!columnMap.ContainsKey("HolidayName") || !columnMap.ContainsKey("HolidayDate"))
                {
                    TempData["ErrorMessage"] = "Excel must contain 'HolidayName' and 'HolidayDate' columns.";
                    return RedirectToAction(nameof(Index));
                }

                // Read data rows
                for (int row = headerRow + 1; row <= worksheet.Dimension.End.Row; row++)
                {
                    var holidayName = worksheet.Cells[row, columnMap["HolidayName"]].Text?.Trim();
                    if (string.IsNullOrWhiteSpace(holidayName))
                    {
                        // Skip row if HolidayName is empty
                        continue;
                    }

                    object cellValue = worksheet.Cells[row, columnMap["HolidayDate"]].Value;
                    DateTime holidayDate;

                    if (cellValue is DateTime dt)
                    {
                        holidayDate = dt;
                    }
                    else if (cellValue is double oa)
                    {
                        try
                        {
                            holidayDate = DateTime.FromOADate(oa);
                        }
                        catch
                        {
                            // Skip invalid OADate
                            continue;
                        }
                    }
                    else if (cellValue != null && DateTime.TryParse(cellValue.ToString(), out DateTime parsed))
                    {
                        holidayDate = parsed;
                    }
                    else
                    {
                        // Skip if date invalid
                        continue;
                    }

                    // Skip if holidayDate is MinValue (invalid)
                    if (holidayDate == DateTime.MinValue)
                        continue;

                    var holiday = new Holiday
                    {
                        HolidayName = holidayName,
                        HolidayDate = holidayDate,
                        Description = columnMap.ContainsKey("Description")
                            ? worksheet.Cells[row, columnMap["Description"]].Text?.Trim()
                            : null,
                        CreatedAt = DateTime.UtcNow
                    };

                    importedHolidays.Add(holiday);
                }

                if (importedHolidays.Count == 0)
                {
                    TempData["WarningMessage"] = "No valid holidays found to import.";
                    return RedirectToAction(nameof(Index));
                }

                await _context.HOLIDAYS.AddRangeAsync(importedHolidays);
                await _context.SaveChangesAsync();

                TempData["SuccessMessage"] = $"Successfully imported {importedHolidays.Count} holidays.";
            }
            catch (Exception ex)
            {
                TempData["ErrorMessage"] = $"Import failed: {ex.Message}";
            }

            return RedirectToAction(nameof(Index));
        }






    }
}
